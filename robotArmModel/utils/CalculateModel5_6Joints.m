function Qm = CalculateModel5_6Joints(  )
% Computes the dynamic model of the system, based on the geometric and
% kinematic model. The Geometric matrices were already determined based on
% the real system robot arm. HEre we just use them. Newton-Euler method was
% used for this.

%simbolic constants
q = sym('q',[1 3]);
dq = sym('dq',[1 3]);
ddq = sym('ddq',[1 3]);
syms q1 q2 q3 dq1 dq2 dq3 ddq1 ddq2 ddq3 'real'
syms  L1 L2 L3 'real'
% geometric matrix declaration
T10=[ 1         0           0           0
      0         cos(q1)     -sin(q1)    0
      0         sin(q1)     cos(q1)     0
      0         0           0           1];
  
T21=[ 1         0           0           0
      0         1           0           0
      0         0           1           L1
      0         0           0           1];

T32=[cos(q2)    0           sin(q2)     0
     0          1           0           0
     -sin(q2)   0           cos(q2)     0
     0          0           0           1];
T43=[1          0           0           0
     0          1           0           0
     0          0           1           L2
     0          0           0           1];
 
%in order to use this in the following formula, some of the matrices should
%be multplied with each other
%renaming the matrices
T10=T10;
T21=T21*T32;
T32=T43;
 
%the geometrical model  
T20=T10*T21;

%to obtain the kinematic model

%defining the rotation matrices
R10=T10(1:3,1:3);
R21=T21(1:3,1:3);

%position vector<?
r1=T10(1:3,4:4);
r2=T21(1:3,4:4);
r3=T32(1:3,4:4);
%r3=zeros(3,1);
%robot base, initial values
w0=[0 0 0]';
dw0=[0 0 0]';
v0=[0 0 0]';
syms g 'real'%gravitational acceleration
dv0=[0 0 g]';
k1=[1 0 0]';
k2=[0 1 0]';
%angular velocity
w1=R10'*w0 + dq1*k1;
w2=R21'*w1 + dq2*k2;

%skew symmetric matrices
w0x=skewSymmetric(w0);
w1x=skewSymmetric(w1);
w2x=skewSymmetric(w2);

%linear velocity
% v1=R10'*(v0+w0x*r1);
% v2=R21'*(v1+w1x*r2);

%angular acceleration
dw1=R10'*dw0+R10'*w0x*dq1*k1+ddq1*k1;
dw2=R21'*dw1+R21'*w1x*dq2*k2+ddq2*k2;

%skew symmetric matrices
dw0x=skewSymmetric(dw0);
dw1x=skewSymmetric(dw1);
dw2x=skewSymmetric(dw2);

%linear acceleration
dv1=R10'*(dv0+dw0x*r1+w0x*w0x*r1);
dv2=R21'*(dv1+dw1x*r2+w1x*w1x*r2);
   
%dynamic model
rc1=[0 0 L1/2]';
rc2=[0 0 L2/2]';
vc1=dv1+dw1x*rc1+w1x*w1x*rc1;
vc2=dv2+dw2x*rc2+w2x*w2x*rc2;

%mass of elements
syms M1 M2 'real'

%external forces
F1=M1*vc1;
F2=M2*vc2;

%Moments of inertia:
%syms I1x I1y I1z I2x I2y I2z I3x I3y I3z 'real'
syms I1x I1y I1z I1xy I1xz I1yz I2x I2y I2z I2xy I2xz I2yz 'real'
I1=[I1x 0 0; 0 I1y 0; 0 0 I1z];
I2=[I2x 0 0; 0 I2y 0; 0 0 I2z];
% I1=[I1x -I1xy -I1xz; -I1xy I1y I1yz; -I1xz -I1yz I1z];
% I2=[I2x -I2xy -I2xz; -I2xy I2y I2yz; -I2xz -I2yz I2z];

%external torques generate by the force Fi
N1=I1*dw1+w1x*I1*w1;
N2=I2*dw2+w2x*I2*w2;

%empty matrix
R32=zeros(3);

f3=[0 0 0]';
f2=R32*f3+F2;
f1=R21*f2+F1;

%skew symmetric matrices
rc1x=skewSymmetric(rc1);
rc2x=skewSymmetric(rc2);

r1x=skewSymmetric(r1);
r2x=skewSymmetric(r2);
r3x=skewSymmetric(r3);

%torques generated by the connection forces
n3=[0 0 0 ]';
n2=R32*n3+rc2x*F2+r3x*R32*f3+N2;
n1=R21*n2+rc1x*F1+r2x*R21*f2+N1;

%final results
Qm=[n1'*k1; n2'*k2];

end

